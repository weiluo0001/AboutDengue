{"version":3,"sources":["WaveletView.bmp","CityLevel.bmp","ForecastView.bmp","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","Navbar","expand","variant","bg","Container","Brand","Nav","Link","href","active","src","wavelet","alt","citylevel","forecast","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,4ECA3CD,EAAOC,QAAU,IAA0B,kC,wMC0F5BC,MAjFf,WACE,OACE,yBAAKC,UAAU,OACf,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,QAAQC,GAAG,SACrC,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAOK,MAAR,yBACE,kBAACC,EAAA,EAAD,CAAKP,UAAU,UAAUG,QAAQ,QAC/B,kBAACI,EAAA,EAAIC,KAAL,CAAUC,KAAK,gDAAf,mCACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,+CAAf,8BACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,mDAAf,iBACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,4CAA4CC,QAAM,GAAjE,YAIR,0CACQ,uBAAGV,UAAU,aAAb,wMAKA,8DAGA,uBAAGA,UAAU,aAAb,0WAOA,yBAAKW,IAAKC,IAASC,IAAI,mCACvB,0DAGA,uBAAGb,UAAU,aAAb,qcAQA,yBAAKW,IAAKG,IAAWD,IAAI,+BACzB,6CAGA,uBAAGb,UAAU,aAAb,+sBAWA,yBAAKW,IAAKI,IAAUF,IAAI,mCAC9B,4CACA,uBAAGb,UAAU,aAAb,kNAGA,uBAAGA,UAAU,aAAb,iPAGA,uBAAGA,UAAU,aAAb,mPAGA,uBAAGA,UAAU,aAAb,kOAGA,uBAAGA,UAAU,aAAb,wPAGA,uBAAGA,UAAU,aAAb,yMCvEYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfa759b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WaveletView.2b5ec8b3.bmp\";","module.exports = __webpack_public_path__ + \"static/media/CityLevel.3a4ce9d8.bmp\";","module.exports = __webpack_public_path__ + \"static/media/ForecastView.0605e6f0.bmp\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport wavelet from './WaveletView.bmp';\nimport citylevel from './CityLevel.bmp';\nimport forecast from './ForecastView.bmp';\nimport './App.css';\nimport {Navbar,Container,Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n      <Container>\n          <Navbar.Brand>Dengue Trend Viz</Navbar.Brand>\n            <Nav className=\"mr-auto\" variant=\"tabs\">\n              <Nav.Link href=\"https://weiluo0001.github.io/dengue_wavelet/\">Global Dengue Timing/Waves View</Nav.Link>\n              <Nav.Link href=\"https://weiluo0001.github.io/brazil_dengue/\" >City-level Diagnostic View</Nav.Link>\n              <Nav.Link href=\"https://weiluo0001.github.io/dengue_prediction/\">Forecast View</Nav.Link>\n              <Nav.Link href=\"https://weiluo0001.github.io/AboutDengue/\" active>About</Nav.Link>\n            </Nav>\n        </Container>\n      </Navbar> \n      <h2> Overview </h2>\n              <p className=\"paragraph\">\n              Dengue Trend Viz is a visual analytics platform used to explore\n              dengue incidence and prediction over space and time. Currently, three\n              different views have been implemented in the system. They are:  \n              </p>\n              <h5>\n              Global Dengue Timing/Wave View\n              </h5>\n              <p className=\"paragraph\">\n              This view shows the temporal patterns of historical dengue incidence where data\n              is available based on wavelet analysis. The map view shows the locations where\n              data is available. The other two heatmap views on the right show both annual and multiannual \n              reconstruction of wavelet analysis across different locations, which have been ordered\n              along the latitude.   \n              </p>\n              <img src={wavelet} alt=\"Global Dengue Timing/Wave View\"/>        \n              <h5>\n              City-level Diagnostic View\n              </h5>\n              <p className=\"paragraph\">\n              This view shows historical dengue incidence where data is available. Users \n              can click on each icon on the map to update the other three views to check \n              the temporal patterns of dengue for each specific city. The view on the top right \n              shows the weekly aggregated dengue incidence by different years. The heatmap\n              shows the aggregated dengue incidence by different years. The timeline at the bottom shows\n              the dengue incidence over the entire time period.   \n              </p>\n              <img src={citylevel} alt=\"City-level Diagnostic View\"/>        \n              <h5>\n              Forecast View\n              </h5>\n              <p className=\"paragraph\">\n              This view shows dengue incidence for 19 cities in Brazil. Users \n              can click on each hexagon on the map to update the other three views \n              for each specific city. Users can mouse over the timeline at the bottom\n              to check the 4 week prediction based on our predictive models. On the two\n              dropdown menus, users can switch to the cumulative cases and also delayed data\n              estimates in the past 8 weeks. The heatmap view on the top left shows the list of \n              cities which are going to experience high risk of dengue outbreak. The speedmeter view \n              will show the dengue outbreak likelihood for one specific city based on our model prediction. Both heatmap and speedmeter\n              views will change accordingly while users mouse over the timeline.   \n              </p>\n              <img src={forecast} alt=\"Global Dengue Timing/Wave View\"/>        \n        <h2> References </h2>\n        <p className=\"reference\">\n        1. C. Kusiaka, M. Santillana Justin Lessler, Sopon Iamsirithaworn, N G Reich. Real-time dengue forecasting in Thailand: a comparison of penalized regression approaches using internet search data. Submitted.  \n        </p>\n        <p className=\"reference\">\n        2. Kiang M ^, M. Santillana ^, Chen JT, Onnela J-P, Krieger N, Eng√∏-Monsen K, Ekapirat N, Areechokchai D, Prempree P, Maude RJ, ..., Buckee C. Adaptive Mosaic Forecasts for Dengue Fever: Integrating space, time, and travel. Submitted. \n        </p>\n        <p className=\"reference\">\n        3. McGough S, Kutz NJ, Clemente LC, M. Santillana. Combining weather patterns and cycles of population susceptibility to forecast dengue fever epidemic years in Brazil: a dynamic, ensemble learning approach. bioRxiv. 2019. (PDF) Submitted. \n        </p>\n        <p className=\"reference\">\n        4. S. Yang, S. C. Kou, F. Lu, J.S. Brownstein, N. Brooke, M. Santillana. Advances in the use of Google searches to track dengue in Mexico, Brazil, Thailand, Singapore and Taiwan. PLoS Computational Biology 13 (7), e1005607 \n        </p>\n        <p className=\"reference\">\n        5. M.A. Johansson, N.G. Reich, A. Hota, J. S. Brownstein, and M. Santillana. Evaluating the performance of infectious disease forecasts: A comparison of climate-driven and seasonal dengue forecasts for Mexico. Scientific Reports 6, 33707 (2016)  \n        </p>\n        <p className=\"reference\">\n        6. R.T. Gluskin, M.A. Johansson, M. Santillana, and J.S. Brownstein. Evaluation of internet-based dengue query data: Google Dengue Trends. PLoS Neglected Tropical Diseases, 8(2): e2713, Feb 2014.  \n        </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}